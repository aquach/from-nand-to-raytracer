class Scene {
  field int width;
  field int height;
  field Number aspect_ratio;
  field Number width_number;
  field Number height_number;
  field Array elements;
  field int nElements;
  field Array lights;
  field int nLights;

  constructor Scene new(int w, int h, Array e, int ne, Array l, int nl) {
    let width = w;
    let height = h;
    let elements = e;
    let nElements = ne;
    let lights = l;
    let nLights = nl;

    let width_number = Number.new(width);
    let height_number = Number.new(height);

    let aspect_ratio = width_number.clone();
    do aspect_ratio.do_div(height_number);

    return this;
  }

  method void dispose() {
    var int i;
    var Element e;
    var DirectionalLight l;

    let i = 0;
    while (i < nElements) {
      let e = elements[i];
      do e.dispose();
      let i = i + 1;
    }
    do elements.dispose();

    let i = 0;
    while (i < nLights) {
      let l = lights[i];
      do l.dispose();
      let i = i + 1;
    }
    do lights.dispose();

    do aspect_ratio.dispose();
    do width_number.dispose();
    do height_number.dispose();

    do Memory.deAlloc(this);

    return;
  }

  method int getWidth() {
    return width;
  }

  method int getHeight() {
    return height;
  }

  method Array getElements() {
    return elements;
  }

  method int getNumElements() {
    return nElements;
  }

  method Array getLights() {
    return lights;
  }

  method int getNumLights() {
    return nLights;
  }

  method Ray create_prime_ray(int pixel_x, int pixel_y, Number one, Number two, Number half) {
    var Number sensor_x;
    var Number sensor_y;
    var Vec3 direction;

    let sensor_x = Number.new(pixel_x);
    do sensor_x.do_add(half);
    do sensor_x.do_div(width_number);
    do sensor_x.do_mul(two);
    do sensor_x.do_sub(one);
    do sensor_x.do_mul(aspect_ratio);

    let sensor_y = Number.new(pixel_y);
    do sensor_y.do_add(half);
    do sensor_y.do_div(height_number);
    do sensor_y.do_neg();
    do sensor_y.do_mul(two);
    do sensor_y.do_add(one);

    let direction = Vec3.new(
        sensor_x,
        sensor_y,
        Number.new(-1)
        );
    do direction.do_normalize();

    return Ray.new(
        Vec3.new(
          Number.new(0),
          Number.new(0),
          Number.new(0)
          ),
        direction
        );
  }

  method Intersection trace(Ray ray) {
    var Intersection closest_intersection;
    var int i;
    var Element elem;
    var Number distance;
    var Number best_distance;
    var boolean is_closer;

    let closest_intersection = null;

    while (i < nElements) {
      let elem = elements[i];
      let distance = elem.intersect(ray);

      let is_closer = false;
      if (~(closest_intersection = null)) {
        let best_distance = closest_intersection.getDistanceFromOrigin();
        let is_closer = distance.is_less_than(best_distance);
      }

      if ((~(distance.is_negative())) & ((closest_intersection = null) | is_closer)) {
        if (~(closest_intersection = null)) {
          do closest_intersection.dispose();
        }
        let closest_intersection = Intersection.new(distance, elem);
      } else {
        do distance.dispose();
      }

      let i = i + 1;
    }

    return closest_intersection;
  }
}
