class Main {
  function void printArray(Array u, int len) {
    var int i;

    do Output.printString("[");

    let i = 0;
    while (i < len) {
      do Output.printInt(u[i]);
      do Output.printString(" ");
      let i = i + 1;
    }

    do Output.printString("]");
    return;
  }

  function Number getRawPixelColor(
    Scene scene,
    int x,
    int y,
    Number neg1,
    Number one,
    Number two,
    Number half
  ) {
    var Number pixel_color;
    var Ray ray;
    var Intersection intersection;
    var Vec3 hit_point;
    var Vec3 offset;
    var Vec3 surface_normal;

    var Vec3 origin;
    var Ray shadow_ray;
    var Intersection shadow_intersection;
    var boolean in_light;

    var Number light_power;
    var Number added_color;

    var Vec3 v;
    var Element e;
    var int i;
    var Number n;
    var Array lights;
    var DirectionalLight light;

    let pixel_color = Number.new(0);

    let ray = scene.create_prime_ray(x, y, one, two, half);
    let intersection = scene.trace(ray);

    if (~(intersection = null)) {
      let v = ray.getOrigin();
      let hit_point = v.clone();
      let v = ray.getDirection();
      let offset = v.clone();
      do offset.do_scale(intersection.getDistanceFromOrigin());
      do hit_point.do_add(offset);

      let e = intersection.getObject();
      let surface_normal = e.surface_normal(hit_point);

      while (i < scene.getNumLights()) {
        let lights = scene.getLights();
        let light = lights[i];

        let origin = hit_point.clone();
        do origin.do_add(light.getShadowBias());

        let v = light.getNegDirection();
        let shadow_ray = Ray.new(origin, v.clone());
        let shadow_intersection = scene.trace(shadow_ray);
        let in_light = (shadow_intersection = null);

        if (~(shadow_intersection = null)) {
          do shadow_intersection.dispose();
        }

        if (in_light) {
          let light_power = surface_normal.dot(light.getNegDirection());

          if (light_power.is_positive()) {
            let n = light.getColor();
            let added_color = n.clone();
            do added_color.do_mul(light_power);
            do added_color.do_div(Number.getPi());

            let e = intersection.getObject();
            let n = e.color(hit_point);
            do added_color.do_mul(n);
            do n.dispose();

            do pixel_color.do_add(added_color);

            do added_color.dispose();
          }

          do light_power.dispose();
        }

        do shadow_ray.dispose();

        let i = i + 1;
      }

      do intersection.dispose();
      do hit_point.dispose();
      do offset.dispose();
      do surface_normal.dispose();
    }

    do ray.dispose();

    return pixel_color;
  }

  function void render(Scene scene) {
      var Number half;
      var Number zero;
      var Number one;
      var Number two;
      var Number three;
      var Number five;
      var Number seven;
      var Number sixteen;
      var Number neg1;

      var int y;
      var int x;
      var int i;

      var Array dither_pixels;
      var Array next_dither_pixels;
      var Array temp;
      var int adjacent_dither;

      var Number quantized_color;
      var int cmp;
      var Number quant_error_16;
      var Number quant_error_5_16;
      var Number quant_error_7_16;
      var Number quant_error_left;
      var Number quant_error_right;

      var boolean is_white;

      var Number pixel_color;
      var Number n;

      var boolean reverse_x;
      var boolean continue;

      let dither_pixels = Array.new(scene.getWidth());
      let next_dither_pixels = Array.new(scene.getWidth());
      let adjacent_dither = 0;

      let i = 0;
      while (i < scene.getWidth()) {
        let dither_pixels[i] = 0;
        let next_dither_pixels[i] = 0;
        let i = i + 1;
      }

      let half = Main.getOneHalf();
      let zero = Number.new(0);
      let one = Number.new(1);
      let two = Number.new(2);
      let three = Number.new(3);
      let five = Number.new(5);
      let seven = Number.new(7);
      let sixteen = Number.new(16);
      let neg1 = Number.new(-1);

      let y = 0;
      while (y < scene.getHeight()) {
        let reverse_x = ~((y / 2 * 2) = y);

        let continue = true;

        if (reverse_x) {
          let x = scene.getWidth() - 1;
        } else {
          let x = 0;
        }

        while (continue) {
          let pixel_color = Main.getRawPixelColor(scene, x, y, neg1, one, two, half);

          // Poor math's gamma correction :sob: sqrt() is much easier than 1/2.2
          do pixel_color.do_sqrt();

          /* // Bring in the value from the dithering. We want to dither _after_ gamma correction. */
          /* // Dithered pixels represent gamma-encoded values already. */
          let n = Number.new_from_int_frac(adjacent_dither);
          do pixel_color.do_add(n);
          do n.dispose();
          let n = Number.new_from_int_frac(dither_pixels[x]);
          do pixel_color.do_add(n);
          do n.dispose();

          // Perform dithering.

          let cmp = pixel_color.cmp(half);
          let is_white = (cmp > 0) | (cmp = 0);
          if (is_white) {
            let quantized_color = one;
          } else {
            let quantized_color = zero;
          }

          let quant_error_16 = pixel_color.clone();
          do quant_error_16.do_sub(quantized_color);
          do quant_error_16.do_div(sixteen);

          if (x + 1 < scene.getWidth()) {
            let quant_error_7_16 = quant_error_16.clone();
            do quant_error_7_16.do_mul(seven);
            let adjacent_dither = quant_error_7_16.frac_to_i16();
            do quant_error_7_16.dispose();
          }

          if (y + 1 < scene.getHeight()) {
            if (x > 0) {
              let quant_error_left = quant_error_16.clone();
              if (~reverse_x) {
                do quant_error_left.do_mul(three);
              }
              let next_dither_pixels[x - 1] = next_dither_pixels[x - 1] + quant_error_left.frac_to_i16();
              do quant_error_left.dispose();
            }

            let quant_error_5_16 = quant_error_16.clone();
            do quant_error_5_16.do_mul(five);
            let next_dither_pixels[x] = next_dither_pixels[x] + quant_error_5_16.frac_to_i16();
            do quant_error_5_16.dispose();

            if (x + 1 < scene.getWidth()) {
              let quant_error_right = quant_error_16.clone();
              if (reverse_x) {
                do quant_error_right.do_mul(three);
              }
              let next_dither_pixels[x + 1] = next_dither_pixels[x + 1] + quant_error_right.frac_to_i16();
              do quant_error_right.dispose();
            }
          }

          do quant_error_16.dispose();

          do Screen.setColor(~is_white);
          do Screen.drawPixel(x, y);

          do pixel_color.dispose();

          if (reverse_x) {
            let x = x - 1;
            let continue = x > -1;
          } else {
            let x = x + 1;
            let continue = x < scene.getWidth();
          }
        }

        // Flip dither.
        let temp = dither_pixels;
        let dither_pixels = next_dither_pixels;
        let next_dither_pixels = temp;

        // Zero out next dither.
        let i = 0;
        while (i < scene.getWidth()) {
          let next_dither_pixels[i] = 0;
          let i = i + 1;
        }

        let y = y + 1;
      }

      do half.dispose();
      do zero.dispose();
      do one.dispose();
      do three.dispose();
      do five.dispose();
      do seven.dispose();
      do sixteen.dispose();

      do dither_pixels.dispose();
      do next_dither_pixels.dispose();

      return;
  }

  function Number getNegativeOneHalf() {
    var Number x;
    var Number y;

    let x = Number.new(-1);
    let y = Number.new(2);

    do x.do_div(y);
    do y.dispose();

    return x;
  }

  function Number getThreeHalves() {
    var Number x;
    var Number y;

    let x = Number.new(3);
    let y = Number.new(2);

    do x.do_div(y);
    do y.dispose();

    return x;
  }

  function Number getFourFifths() {
    var Number x;
    var Number y;

    let x = Number.new(4);
    let y = Number.new(5);

    do x.do_div(y);
    do y.dispose();

    return x;
  }

  function Number getThreeFifths() {
    var Number x;
    var Number y;

    let x = Number.new(3);
    let y = Number.new(5);

    do x.do_div(y);
    do y.dispose();

    return x;
  }

  function Number getOneHalf() {
    var Number x;
    var Number y;

    let x = Number.new(1);
    let y = Number.new(2);

    do x.do_div(y);
    do y.dispose();

    return x;
  }

  function Number getOneTwentieth() {
    var Number x;
    var Number y;

    let x = Number.new(1);
    let y = Number.new(20);

    do x.do_div(y);
    do y.dispose();

    return x;
  }

  function Number getOneFiftieth() {
    var Number x;
    var Number y;

    let x = Number.new(1);
    let y = Number.new(50);

    do x.do_div(y);
    do y.dispose();

    return x;
  }

  function Number getNineTenths() {
    var Number x;
    var Number y;

    let x = Number.new(9);
    let y = Number.new(10);

    do x.do_div(y);
    do y.dispose();

    return x;
  }

  function Number getThreeTenths() {
    var Number x;
    var Number y;

    let x = Number.new(3);
    let y = Number.new(10);

    do x.do_div(y);
    do y.dispose();

    return x;
  }

  function void main() {
    var Scene scene;

    var int nElements;
    var Array elements;
    var int nLights;
    var Array lights;

    var Vec3 d0;
    var Vec3 d1;
    var Vec3 d2;

    var Number n;

    do Int32.initialize();
    do Number.initialize();
    do Plane.initialize();

    let nElements = 5;
    let elements = Array.new(nElements);

    let nLights = 3;
    let lights = Array.new(nLights);

    let elements[0] = Element.sphere(Sphere.new(
          Vec3.new(
            Number.new(-6),
            Main.getNegativeOneHalf(),
            Number.new(-5)
            ),
          Main.getThreeHalves(),
          Main.getFourFifths()
          ));

    let elements[1] = Element.sphere(Sphere.new(
          Vec3.new(
            Number.new(-1),
            Number.new(-1),
            Number.new(-5)
            ),
          Number.new(1),
          Main.getThreeFifths()
          ));

    let elements[2] = Element.sphere(Sphere.new(
          Vec3.new(
            Number.new(2),
            Number.new(0),
            Number.new(-3)
            ),
          Number.new(2),
          Number.new(1)
          ));

    let elements[3] = Element.plane(Plane.new(
          Vec3.new(
            Number.new(0),
            Number.new(0),
            Number.new(-25)
            ),
          Vec3.new(
            Number.new(0),
            Number.new(0),
            Number.new(-1)
            ),
          Number.new(1),
          false
          ));

    let elements[4] = Element.plane(Plane.new(
          Vec3.new(
            Number.new(0),
            Number.new(-2),
            Number.new(0)
            ),
          Vec3.new(
            Number.new(0),
            Number.new(-1),
            Number.new(0)
            ),
          Number.new(-1),
          true
          ));

    let d0 = Vec3.new(
        Number.new(0),
        Number.new(-1),
        Number.new(-1)
        );
    do d0.do_normalize();

    let d1 = Vec3.new(
        Number.new(-1),
        Number.new(-1),
        Number.new(0)
        );
    do d1.do_normalize();

    let d2 = Vec3.new(
        Main.getOneHalf(),
        Number.new(-1),
        Number.new(0)
        );
    do d2.do_normalize();

    let lights[0] = DirectionalLight.new(d0, Main.getOneFiftieth());
    let lights[1] = DirectionalLight.new(d1, Main.getNineTenths());
    let lights[2] = DirectionalLight.new(d2, Main.getThreeTenths());

    let scene = Scene.new(
        512,
        256,
        elements,
        nElements,
        lights,
        nLights
        );

    do Main.render(scene);
    do scene.dispose();

    return;
  }
}
