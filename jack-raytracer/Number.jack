class Number {
  field Int32 v;
  static int BYTES_FOR_FRAC;
  static Int32 SCALE_FACTOR;
  static Int32 SCALE_FACTOR_SQRT_SQRT;
  static Int32 SCALE_FACTOR_SQRT_SQRT_SQRT_POW_3;
  static Number PI;

  static Int32 two;

  static int allocs;

  function Number getPi() {
    return PI;
  }

  function void initialize() {
    var Int32 s;
    var Int32 t;
    var Int32 u;

    let BYTES_FOR_FRAC = 2;

    let SCALE_FACTOR = Int32.new(256);
    do SCALE_FACTOR.do_mul(SCALE_FACTOR);

    let t = Int32.new(561);
    let u = Int32.new(367);
    do t.do_mul(u);
    let PI = Number.new_from_int32(t);

    let SCALE_FACTOR_SQRT_SQRT = SCALE_FACTOR.clone();
    do SCALE_FACTOR_SQRT_SQRT.do_sqrt();
    do SCALE_FACTOR_SQRT_SQRT.do_sqrt();

    let SCALE_FACTOR_SQRT_SQRT_SQRT_POW_3 = SCALE_FACTOR_SQRT_SQRT.clone();
    do SCALE_FACTOR_SQRT_SQRT_SQRT_POW_3.do_sqrt();
    let s = SCALE_FACTOR_SQRT_SQRT_SQRT_POW_3.clone();
    do SCALE_FACTOR_SQRT_SQRT_SQRT_POW_3.do_mul(s);
    do SCALE_FACTOR_SQRT_SQRT_SQRT_POW_3.do_mul(s);

    do u.dispose();
    do s.dispose();

    let two = Int32.new(2);

    return;
  }

  constructor Number new(int i) {
    let allocs = allocs + 1;

    let v = Int32.new(i);
    do v.do_left_shift_bytes(BYTES_FOR_FRAC);
    return this;
  }

  constructor Number new_from_int32(Int32 i) {
    let allocs = allocs + 1;

    let v = i;
    return this;
  }

  constructor Number new_from_int_frac(int i) {
    let allocs = allocs + 1;

    let v = Int32.new(i);
    do v.do_mul(two);

    return this;
  }

  method int frac_to_i16() {
    var Array parts;
    let parts = v.getParts();

    if (is_negative()) {
      return -((255 - parts[1]) * 128 + (256 - parts[0]) / 2);
    } else {
      return (parts[1] * 128) + (parts[0] / 2);
    }
  }

  method void dispose() {
    let allocs = allocs - 1;

    do v.dispose();
    do Memory.deAlloc(this);
    return;
  }

  method Number clone() {
    return Number.new_from_int32(v.clone());
  }

  method Int32 getV() {
    return v;
  }

  method boolean is_zero() {
    return v.is_zero();
  }

  method boolean is_negative() {
    return v.is_negative();
  }

  method boolean is_positive() {
    return v.is_positive();
  }

  method void do_add(Number other) {
    do v.do_add(other.getV());
    return;
  }

  method void do_sub(Number other) {
    do v.do_sub(other.getV());
    return;
  }

  method void do_mul(Number other) {
    if (v.is_zero() | other.is_zero()) {
      do v.do_zero();
      return;
    }
    do v.do_mul_right_shift_bytes(other.getV(), BYTES_FOR_FRAC);
    return;
  }

  method void do_div(Number other) {
    if (v.is_zero() & ~other.is_zero()) {
      do v.do_zero();
      return;
    }
    do v.do_left_shift_bytes_div(BYTES_FOR_FRAC, other.getV());
    return;
  }

  method void do_sqrt() {
    do v.do_mul(SCALE_FACTOR_SQRT_SQRT);
    do v.do_sqrt();
    do v.do_mul(SCALE_FACTOR_SQRT_SQRT_SQRT_POW_3);
    return;
  }

  method void do_neg() {
    do v.do_neg();
    return;
  }

  method void do_abs() {
    do v.do_abs();
    return;
  }

  method int cmp(Number other)  {
    return v.cmp(other.getV());
  }

  method boolean is_less_than(Number other)  {
    return v.cmp(other.getV()) < 0;
  }

  method Int32 to_int32() {
    let allocs = allocs - 1;
    do v.do_right_shift_bytes(BYTES_FOR_FRAC);
    do Memory.deAlloc(this);
    return v;
  }

  method void do_zero() {
    do v.do_zero();
    return;
  }

  method void print() {
    do v.print();
    return;
  }

  function void printAllocs() {
    do Output.printString("number allocs: ");
    do Output.printInt(allocs);
    do Output.println();
    return;
  }
}
