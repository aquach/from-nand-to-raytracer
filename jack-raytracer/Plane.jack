// One-sided plane.
class Plane {
  field Vec3 origin;
  field Vec3 normal;
  field Number color;
  field boolean checkerboarded;

  static Vec3 forward;
  static Vec3 up;
  static Number thousand;
  static Number scale;
  static Number white;
  static Number black;

  constructor Plane new(Vec3 o, Vec3 n, Number c, boolean ch) {
    let origin = o;
    let normal = n;
    let color = c;
    let checkerboarded = ch;
    return this;
  }

  method void dispose() {
    do origin.dispose();
    do normal.dispose();
    do color.dispose();
    do Memory.deAlloc(this);
    return;
  }

  function void initialize() {
    var Number hundred;

    let forward = Vec3.new(
        Number.new(0),
        Number.new(0),
        Number.new(1)
        );
    let up = Vec3.new(
        Number.new(0),
        Number.new(1),
        Number.new(0)
        );

    let thousand = Number.new(1000);

    let scale = Number.new(1);

    let white = Number.new(90);
    let black = Number.new(3);

    let hundred = Number.new(100);
    do white.do_div(hundred);
    do black.do_div(hundred);
    do hundred.dispose();

    return;
  }

  method Number intersect(Ray ray) {
    var Number denom;
    var Vec3 ray_to_origin;
    var Number distance;

    let denom = normal.dot(ray.getDirection());

    if (~denom.is_positive()) {
      do denom.dispose();
      return Number.new(-1);
    }

    let ray_to_origin = origin.clone();
    do ray_to_origin.do_sub(ray.getOrigin());

    let distance = ray_to_origin.dot(normal);
    do distance.do_div(denom);

    do denom.dispose();
    do ray_to_origin.dispose();

    if (~distance.is_negative()) {
      return distance;
    } else {
      do distance.dispose();
      return Number.new(-1);
    }
  }

  method Vec3 color(Vec3 hit_point) {
    var Vec3 x_axis;
    var Vec3 y_axis;
    var Number dist_sq;

    var Number v;
    var Int32 x;
    var Int32 y;
    var Int32 sum;
    var Number n;

    if (checkerboarded) {
      let x_axis = normal.clone();
      do x_axis.do_cross(forward);

      let dist_sq = x_axis.dist_sq();
      if (dist_sq.is_zero()) {
        do x_axis.dispose();
        let x_axis = normal.clone();
        do x_axis.do_cross(up);
      }

      let y_axis = normal.clone();
      do y_axis.do_cross(x_axis);

      let v = hit_point.dot(x_axis);
      do v.do_mul(scale);
      do v.do_add(thousand);
      let x = v.to_int32();

      let v = hit_point.dot(y_axis);
      do v.do_mul(scale);
      do v.do_add(thousand);
      let y = v.to_int32();

      let sum = x.clone();
      do sum.do_add(y);

      if (sum.is_even()) {
        let n = white.clone();
      } else {
        let n = black.clone();
      }

      do x_axis.dispose();
      do y_axis.dispose();
      do dist_sq.dispose();

      do x.dispose();
      do y.dispose();
      do sum.dispose();

      return n;
    } else {
      return color.clone();
    }
  }

  method Vec3 surface_normal() {
    var Number neg1;
    var Vec3 c;

    let neg1 = Number.new(-1);

    let c = normal.clone();
    do c.do_scale(neg1);
    do neg1.dispose();
    return c;
  }
}
